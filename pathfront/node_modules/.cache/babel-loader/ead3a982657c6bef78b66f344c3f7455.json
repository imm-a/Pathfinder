{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amrit\\\\mspf\\\\Pathfinder-master\\\\PF\\\\pathfront\\\\src\\\\PathfinderVisualizer\\\\PathfinderVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport './PathfinderVisualizer.scss';\nconst START_NODE_ROW = 11;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 11;\nconst FINISH_NODE_COL = 50;\nconst ROW_NUMBER = 20;\nconst COLUMN_NUMBER = 52;\nlet randomGenerator = false;\nlet defaultRandomWallGenerator = 0.15;\nexport default class PathfinderVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      startNodeIsPressed: false,\n      finishNodeIsPressed: false,\n      isVisualizing: false,\n      visualizationBeenReset: true,\n      path: []\n    };\n  }\n  /**\n   * Function called on init, so as to create 2D grid layout with start and finish node set\n   */\n\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  /**\n   * Function to handle when mouse is clicked at node, so as to start making or make particular node an obstacle\n   */\n\n\n  handleMousePress(row, col) {\n    if (!this.state.visualizationBeenReset) return;\n    if (this.state.isVisualizing) return;\n\n    if (this.state.grid[row][col].isStart) {\n      this.handleMousePressforStart(row, col);\n      return;\n    } else if (this.state.grid[row][col].isFinish) {\n      this.handleMousePressforFinish(row, col);\n      return;\n    }\n\n    const newGrid = toggleWallResetGrid(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n  /**\n   * Function to handle when mouse enters node while pressed, so as to make node an obstacle\n   */\n\n\n  handleMouseEnter(row, col) {\n    if (!this.state.visualizationBeenReset) return;\n    if (this.state.isVisualizing) return;\n    if (!this.state.mouseIsPressed && !this.state.startNodeIsPressed && !this.state.finishNodeIsPressed) return; //if not pressed already, don't do anything\n\n    if (this.state.startNodeIsPressed) {\n      this.handleMouseEnterWithStart(row, col);\n      return;\n    } else if (this.state.finishNodeIsPressed) {\n      this.handleMouseEnterWithFinish(row, col);\n      return;\n    } else {\n      const newGrid = toggleWallResetGrid(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n  /**\n   * Function to handle when user stops holding down mouse for obstacle creation, so s to stop making walls\n   */\n\n\n  handleStop(row, col) {\n    if (!this.state.visualizationBeenReset) return;\n    if (this.state.isVisualizing) return;\n    this.setState({\n      mouseIsPressed: false\n    });\n    this.setState({\n      startNodeIsPressed: false\n    });\n    this.setState({\n      finishNodeIsPressed: false\n    });\n  }\n  /**\n   * Function to handle when mouse is clicked on start, note that it is start pressed - prep to hold it\n   */\n\n\n  handleMousePressforStart(row, col) {\n    this.setState({\n      startNodeIsPressed: true\n    });\n  }\n  /**\n   * Function to handle when mouse is clicked on finish, note that it is start pressed - prep to hold it\n   */\n\n\n  handleMousePressforFinish(row, col) {\n    this.setState({\n      finishNodeIsPressed: true\n    });\n  }\n  /**\n   * When mouse enters node while pressed  (holding the start node), make node wall\n   */\n\n\n  handleMouseEnterWithStart(row, col) {\n    if (!this.state.startNodeIsPressed) return; //if start not pressed already, don't do anything\n\n    const newGrid = toggleStartResetGrid(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n  /**\n   * Function to handle when mouse enters node while pressed (holding the finish node), make node wall\n   */\n\n\n  handleMouseEnterWithFinish(row, col) {\n    if (!this.state.finishNodeIsPressed) return; //if finish not pressed already, don't do anything\n\n    const newGrid = toggleFinishResetGrid(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n  /**\n   * Function to handle when mouse leaves node while pressed, make node wall\n   */\n\n\n  handleMouseLeave(row, col) {\n    if (!this.state.startNodeIsPressed && !this.state.finishNodeIsPressed) return; //if not pressed already, don't do anything\n\n    let newGrid;\n\n    if (this.state.startNodeIsPressed) {\n      newGrid = toggleStartResetGrid(this.state.grid, row, col);\n    } else if (this.state.finishNodeIsPressed) {\n      newGrid = toggleFinishResetGrid(this.state.grid, row, col);\n    }\n\n    this.setState({\n      grid: newGrid\n    });\n  }\n  /**\n   * Function to get current startNode coordinates for visualization\n   */\n\n\n  getStartNode() {\n    const {\n      grid\n    } = this.state;\n    let startNode = grid[START_NODE_ROW][START_NODE_COL];\n    grid.forEach(function (row) {\n      for (let i = 0; i < row.length; i++) {\n        let node = row[i];\n\n        if (node.isStart) {\n          startNode = node;\n          ;\n        }\n      }\n    });\n    return startNode;\n  }\n  /**\n  * Function to get current finishNode coordinates for visualization\n  */\n\n\n  getFinishNode() {\n    const {\n      grid\n    } = this.state;\n    let finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    grid.forEach(function (row) {\n      for (let i = 0; i < row.length; i++) {\n        let node = row[i];\n\n        if (node.isFinish) {\n          finishNode = node;\n          ;\n        }\n      }\n    });\n    return finishNode;\n  }\n\n  getPath() {\n    const {\n      grid\n    } = this.state;\n    const start = this.getStartNode();\n    const end = this.getFinishNode();\n    const sindex = [start.row, start.col];\n    const findex = [end.row, end.col];\n    let maze = [];\n    grid.forEach(function (row) {\n      let rowm = [];\n\n      for (let i = 0; i < row.length; i++) {\n        let node = row[i];\n\n        if (node.isWall) {\n          rowm.push(1);\n        } else {\n          rowm.push(0);\n        }\n      }\n\n      maze.push(rowm);\n    });\n    console.log(maze);\n    this.getData(sindex, findex, maze);\n    const shortestpath = [];\n    setTimeout(() => {\n      //console.log(this.state.path)\n      for (var i = 0; i < this.state.path.length; i++) {\n        for (let row = 0; row < ROW_NUMBER; row++) {\n          for (let col = 0; col < COLUMN_NUMBER; col++) {\n            let node = grid[row][col];\n\n            if (row == this.state.path[i][0] && col == this.state.path[i][1]) {\n              shortestpath.push(node);\n            }\n          }\n        }\n      }\n\n      console.log(shortestpath);\n      this.animateShortestPath(shortestpath);\n    }, 5000);\n  }\n\n  async getData(sindex, findex, maze) {\n    const {\n      grid\n    } = this.state;\n    let sendData = {\n      \"start\": sindex,\n      \"end\": findex,\n      \"maze\": maze,\n      \"cost\": 1\n    };\n    console.log(sendData);\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(sendData)\n    };\n    const response = await fetch('http://127.0.0.1:5000/', requestOptions);\n    const data = await response.json(); //console.log(data);\n\n    this.setState({\n      path: await data\n    });\n\n    if (this.state.path[0][0] === -1 && this.state.path[0][1] === -2) {\n      console.log('Ouch');\n      alert('No path available');\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n\n    this.setState({\n      isVisualizing: false\n    });\n    this.setState({\n      visualizationBeenReset: true\n    });\n  }\n  /**\n   * Function that changes the obstacke setup\n   */\n\n\n  changeObstacles() {\n    if (this.state.isVisualizing) return; // if (!this.state.visualizationBeenReset) return;\n\n    randomGenerator = true;\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n    this.minorResetGrid(grid);\n    this.setState({\n      visualizationBeenReset: true\n    });\n  }\n  /**\n   * Function that generates Random Obstacle SetUp given a particular obstacle density\n   */\n\n\n  changeDensity(density) {\n    if (this.state.isVisualizing) return; // if (!this.state.visualizationBeenReset) return;\n\n    randomGenerator = true;\n    defaultRandomWallGenerator = density;\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n    this.minorResetGrid(grid);\n    this.setState({\n      visualizationBeenReset: true\n    });\n  }\n  /**\n   * Function to show or hide obstacles On or Off\n   */\n\n\n  toggleObstacles() {\n    if (this.state.isVisualizing) return; // if (!this.state.visualizationBeenReset) return;\n\n    randomGenerator = !randomGenerator;\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n    this.minorResetGrid(grid);\n    this.setState({\n      visualizationBeenReset: true\n    });\n  }\n\n  resetGrid() {\n    if (this.state.isVisualizing) return; // if (!this.state.visualizationBeenReset) return;\n\n    this.setState({\n      isVisualizing: false\n    });\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n    grid.forEach(function (row) {\n      for (let i = 0; i < row.length; i++) {\n        let node = row[i];\n\n        if (!node.isStart && !node.isFinish && !node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n        }\n      }\n    });\n    this.setState({\n      visualizationBeenReset: true\n    });\n  }\n\n  minorResetGrid(grid) {\n    if (this.state.isVisualizing) return;\n    grid.forEach(function (row) {\n      for (let i = 0; i < row.length; i++) {\n        let node = row[i];\n\n        if (!node.isStart && !node.isFinish && !node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n        }\n      }\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNodeIsPressed,\n      finishNodeIsPressed\n    } = this.state;\n    const isVisualizing = this.state.isVisualizing;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"openModal-about\",\n      class: \"modalDialog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#saka\",\n      title: \"Close\",\n      className: \"close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 15\n      }\n    }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"cPanelContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cPanelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 3\n      }\n    }, \"Welcome to PathFinder\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 3\n      }\n    }, \"A pathfinding algorithm seeks to find the shortest path between two points.\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 92\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 3\n      }\n    }, \"This application visualizes various pathfinding algorithms in action on a 2D grid.\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 1\n      }\n    }, \"Instruction Guide\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 1\n      }\n    }, \"You can visualize of one of two algorithms the A star algorithm\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 1\n      }\n    }, \"You can add obstacles to the grid through multiple ways:\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 1\n      }\n    }, \" - \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 13\n      }\n    }, \"Toggle\"), \"  \\xA0 - \\xA0 You can toggle obstacles on or off\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 1\n      }\n    }, \" - \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }\n    }, \"Obstacle options\"), \"  \\xA0 - \\xA0  You can select between three different obstacle densities\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 1\n      }\n    }, \" - \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 13\n      }\n    }, \"Draw obstacles\"), \"  \\xA0 - \\xA0  You can click or click and drag to generate obstacles with the pointer\")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 1\n      }\n    }, \"Application Key\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 1\n      }\n    }, \" - \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }\n    }, \"Nodes\"), \"  \\xA0 - \\xA0 A point in the grid\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 1\n      }\n    }, \" - \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }\n    }, \"Gray nodes\"), \"  \\xA0 - \\xA0 Obstacles\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 1\n      }\n    }, \" - \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }\n    }, \"Pink nodes\"), \"  \\xA0 - \\xA0 Nodes that are part of the final path\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 1\n      }\n    }, \" - \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }\n    }, \"Green node\"), \"  \\xA0 - \\xA0 The starting point\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 1\n      }\n    }, \" - \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 13\n      }\n    }, \"Red node\"), \"  \\xA0 - \\xA0 The end point\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 1\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 8\n      }\n    }, \"Note\"), \"  \\xA0 - \\xA0You can drag the start point (in green) and endpoint (in red) to your desired position\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cPanelFooter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 1\n      }\n    })))), /*#__PURE__*/React.createElement(\"nav\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"logo\",\n      onClick: () => this.resetGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }\n    }, \"PATH  \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 15\n      }\n    }), \" FINDER\"), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"nav-links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }\n    }, isVisualizing ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 24\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }\n    }, \"Visualizing\")) : /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"nav-links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dd-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 15\n      }\n    }, \"Visualize\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"dd-input\",\n      id: \"test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"dd-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.getPath(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }\n    }, \"A* Algorithm\"))), /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.resetGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }\n    }, \"Reset Grid\"), /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.toggleObstacles(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 13\n      }\n    }, \"Toggle Obstacles\"), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dd-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 15\n      }\n    }, \"Obstacle Options\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"dd-input\",\n      id: \"test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"dd-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.changeObstacles(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }\n    }, \"Change Obstacles\"), /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.changeDensity(0.095),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }\n    }, \"Low Density Obstacles\"), /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.changeDensity(0.13),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }\n    }, \"Medium Density Obstacles\"), /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.changeDensity(0.25),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }\n    }, \"High Density Obstacles\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 13\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#openModal-about\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 18\n      }\n    }, \"App Info\"), \" \"))), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 14\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid align-middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          startNodeIsPressed: startNodeIsPressed,\n          finishNodeIsPressed: finishNodeIsPressed,\n          whileMousePressed: (row, col) => this.handleMousePress(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseLeave: (row, col) => this.handleMouseLeave(row, col),\n          onMouseUp: () => this.handleStop(row, col),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n/**\n * function to setup nodes and default position of startpoint and endpoint\n */\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    distance: Infinity,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    isWall: false,\n    isVisited: false,\n    previousNode: null,\n    f_score: Infinity,\n    g_score: Infinity,\n    h_score: Infinity\n  };\n};\n/**\n * function to setup 2D grid layout\n */\n\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < ROW_NUMBER; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < COLUMN_NUMBER; col++) {\n      let newNode = createNode(col, row); //Random wall generator\n\n      if (randomGenerator) {\n        if (Math.random(1) < defaultRandomWallGenerator) {\n          newNode.isWall = true;\n        }\n      }\n\n      currentRow.push(newNode);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n/**\n * function to make a node a wall\n */\n\n\nconst toggleWallResetGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n/**\n * function to make a node a startPoint or remove it as a startPoint\n */\n\n\nconst toggleStartResetGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStart: !node.isStart\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n/**\n * function to make a node a endPoint or remove it as a startPoint\n */\n\n\nconst toggleFinishResetGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isFinish: !node.isFinish\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["C:/Users/amrit/mspf/Pathfinder-master/PF/pathfront/src/PathfinderVisualizer/PathfinderVisualizer.jsx"],"names":["React","Component","Node","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","ROW_NUMBER","COLUMN_NUMBER","randomGenerator","defaultRandomWallGenerator","PathfinderVisualizer","constructor","state","grid","mouseIsPressed","startNodeIsPressed","finishNodeIsPressed","isVisualizing","visualizationBeenReset","path","componentDidMount","getInitialGrid","setState","handleMousePress","row","col","isStart","handleMousePressforStart","isFinish","handleMousePressforFinish","newGrid","toggleWallResetGrid","handleMouseEnter","handleMouseEnterWithStart","handleMouseEnterWithFinish","handleStop","toggleStartResetGrid","toggleFinishResetGrid","handleMouseLeave","getStartNode","startNode","forEach","i","length","node","getFinishNode","finishNode","getPath","start","end","sindex","findex","maze","rowm","isWall","push","console","log","getData","shortestpath","setTimeout","animateShortestPath","sendData","requestOptions","method","headers","body","JSON","stringify","response","fetch","data","json","alert","nodesInShortestPathOrder","document","getElementById","className","changeObstacles","minorResetGrid","changeDensity","density","toggleObstacles","resetGrid","render","map","rowIdx","nodeIdx","createNode","distance","Infinity","isVisited","previousNode","f_score","g_score","h_score","currentRow","newNode","Math","random","slice"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react';\nimport Node from './Node/Node';\nimport './PathfinderVisualizer.scss';\n\n\nconst START_NODE_ROW = 11;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 11;\nconst FINISH_NODE_COL = 50;\nconst ROW_NUMBER = 20;\nconst COLUMN_NUMBER = 52;\n\nlet randomGenerator = false;\nlet defaultRandomWallGenerator = 0.15;\n\nexport default class PathfinderVisualizer extends Component {\n  constructor(){\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      startNodeIsPressed: false,\n      finishNodeIsPressed: false,\n      isVisualizing: false,\n      visualizationBeenReset: true,\n      path: [],\n    };\n  }\n\n  /**\n   * Function called on init, so as to create 2D grid layout with start and finish node set\n   */\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n  \n  /**\n   * Function to handle when mouse is clicked at node, so as to start making or make particular node an obstacle\n   */\n  handleMousePress(row, col){\n    if (!this.state.visualizationBeenReset) return;\n    if (this.state.isVisualizing) return;\n\n    if (this.state.grid[row][col].isStart){\n      this.handleMousePressforStart(row, col);\n      return;\n    } else if(this.state.grid[row][col].isFinish){\n      this.handleMousePressforFinish(row, col);\n      return;\n    }\n    const newGrid = toggleWallResetGrid(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  /**\n   * Function to handle when mouse enters node while pressed, so as to make node an obstacle\n   */\n  handleMouseEnter(row, col){\n    if (!this.state.visualizationBeenReset) return;\n    if (this.state.isVisualizing) return;\n    if ((!this.state.mouseIsPressed) && (!this.state.startNodeIsPressed) && (!this.state.finishNodeIsPressed)) return; //if not pressed already, don't do anything\n    if(this.state.startNodeIsPressed){\n      this.handleMouseEnterWithStart(row, col);\n      return;\n    } \n    else if(this.state.finishNodeIsPressed){\n      this.handleMouseEnterWithFinish(row, col);\n      return;    \n    }\n    else {\n      const newGrid = toggleWallResetGrid(this.state.grid, row, col);\n      this.setState({grid: newGrid});\n    }\n  }\n\n  /**\n   * Function to handle when user stops holding down mouse for obstacle creation, so s to stop making walls\n   */\n  handleStop(row, col){\n    if (!this.state.visualizationBeenReset) return;\n    if (this.state.isVisualizing) return;\n    this.setState({mouseIsPressed: false});\n    this.setState({startNodeIsPressed: false});\n    this.setState({finishNodeIsPressed: false});\n  }\n\n  /**\n   * Function to handle when mouse is clicked on start, note that it is start pressed - prep to hold it\n   */\n  handleMousePressforStart(row, col){\n      this.setState({startNodeIsPressed: true});\n  }\n  /**\n   * Function to handle when mouse is clicked on finish, note that it is start pressed - prep to hold it\n   */\n  handleMousePressforFinish(row, col){\n    this.setState({finishNodeIsPressed: true});\n}\n\n  /**\n   * When mouse enters node while pressed  (holding the start node), make node wall\n   */\n  handleMouseEnterWithStart(row, col){\n    if (!this.state.startNodeIsPressed) return; //if start not pressed already, don't do anything\n    const newGrid = toggleStartResetGrid(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  /**\n   * Function to handle when mouse enters node while pressed (holding the finish node), make node wall\n   */\n  handleMouseEnterWithFinish(row, col){\n    if (!this.state.finishNodeIsPressed) return; //if finish not pressed already, don't do anything\n    const newGrid = toggleFinishResetGrid(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  } \n\n  /**\n   * Function to handle when mouse leaves node while pressed, make node wall\n   */\n  handleMouseLeave(row, col){\n    if ((!this.state.startNodeIsPressed) && (!this.state.finishNodeIsPressed)) return; //if not pressed already, don't do anything\n    let newGrid;\n    if(this.state.startNodeIsPressed){\n      newGrid = toggleStartResetGrid(this.state.grid, row, col);\n    } \n    else if(this.state.finishNodeIsPressed){\n      newGrid = toggleFinishResetGrid(this.state.grid, row, col);\n    }\n    this.setState({grid: newGrid});\n}\n\n  /**\n   * Function to get current startNode coordinates for visualization\n   */\n  getStartNode(){\n    const {grid} = this.state;\n    let startNode =grid[START_NODE_ROW][START_NODE_COL];\n    grid.forEach(function(row){\n      for (let i = 0; i < row.length; i++){\n        let node = (row[i]);\n        if (node.isStart){\n          startNode = node;;\n        }\n      }\n    });\n    return startNode;\n  }\n\n    /**\n   * Function to get current finishNode coordinates for visualization\n   */\n  getFinishNode(){\n    const {grid} = this.state;\n    let finishNode =grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    grid.forEach(function(row){\n      for (let i = 0; i < row.length; i++){\n        let node = (row[i]);\n        if (node.isFinish){\n          finishNode = node;;\n        }\n      }\n    });\n    return finishNode;\n  }\n\n getPath(){\n   const {grid} = this.state;\n   const start = this.getStartNode()\n   const end = this.getFinishNode()\n   const sindex = [start.row, start.col]\n   const findex = [end.row, end.col]\n   \n   let maze=[]\n   grid.forEach(function(row){\n     let rowm=[]\n    for (let i = 0; i < row.length; i++){\n      let node = (row[i]);\n      if (node.isWall){\n        rowm.push(1);\n      }\n      else{\n        rowm.push(0)\n      }\n    }\n    maze.push(rowm)\n  });\n  console.log(maze)\nthis.getData(sindex,findex,maze)\nconst shortestpath=[]\nsetTimeout(()=>{//console.log(this.state.path)\n  for(var i=0;i<(this.state.path).length;i++){\n  for (let row = 0; row <ROW_NUMBER; row++) {\n    \n    for (let col = 0; col < COLUMN_NUMBER; col++) {\n       let node = grid[row][col]\n      if(row==(this.state.path)[i][0] && col==(this.state.path)[i][1]){\n      shortestpath.push(node)\n      }\n    }\n  }\n}\n  console.log(shortestpath)\n  this.animateShortestPath(shortestpath)\n},5000)\n\n}\n\nasync getData(sindex, findex, maze){\n  const {grid} = this.state\n  let sendData = { \"start\": sindex,\n  \"end\": findex,\n  \"maze\": maze,\n  \"cost\": 1,\n  }\n  console.log(sendData)\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(sendData)\n};\nconst response = await fetch('http://127.0.0.1:5000/', requestOptions);\nconst data = await response.json();\n//console.log(data);\nthis.setState({path: await data});\nif((this.state.path)[0][0]===-1 && (this.state.path)[0][1]===-2)\n{console.log('Ouch')\nalert('No path available')}\n\n}\n\nanimateShortestPath(nodesInShortestPathOrder) {\n\n  for (let i = 1; i < nodesInShortestPathOrder.length-1; i++) {\n    setTimeout(() => {\n      const node = nodesInShortestPathOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n    }, 50 * i);\n  }\n  this.setState({isVisualizing: false});\n  this.setState({visualizationBeenReset: true});\n}\n\n\n\n\n  /**\n   * Function that changes the obstacke setup\n   */\n  changeObstacles(){\n    if (this.state.isVisualizing) return;\n    // if (!this.state.visualizationBeenReset) return;\n    randomGenerator = true;\n    const grid = getInitialGrid();\n    this.setState({grid});\n    this.minorResetGrid(grid);\n    this.setState({visualizationBeenReset: true});\n  }\n\n  /**\n   * Function that generates Random Obstacle SetUp given a particular obstacle density\n   */\n  changeDensity(density){\n    if (this.state.isVisualizing) return;\n    // if (!this.state.visualizationBeenReset) return;\n    randomGenerator = true;\n    defaultRandomWallGenerator = density;\n    const grid = getInitialGrid();\n    this.setState({grid});\n    this.minorResetGrid(grid);\n    this.setState({visualizationBeenReset: true});\n\n  }\n  /**\n   * Function to show or hide obstacles On or Off\n   */\n  toggleObstacles(){\n    if (this.state.isVisualizing) return;\n    // if (!this.state.visualizationBeenReset) return;\n    randomGenerator = !randomGenerator;\n    const grid = getInitialGrid();\n    this.setState({grid});\n    this.minorResetGrid(grid);\n    this.setState({visualizationBeenReset: true});\n  }\n\n  resetGrid(){\n    if (this.state.isVisualizing) return;\n    // if (!this.state.visualizationBeenReset) return;\n    this.setState({isVisualizing: false});\n    const grid = getInitialGrid();\n    this.setState({grid});\n    grid.forEach(function(row){\n      for (let i = 0; i < row.length; i++){\n        let node = (row[i]);\n        if (!node.isStart && !node.isFinish && !node.isWall){\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n        }\n      }\n    });\n    this.setState({visualizationBeenReset: true});\n  }\n\n  minorResetGrid(grid){\n    if (this.state.isVisualizing) return;\n    grid.forEach(function(row){\n      for (let i = 0; i < row.length; i++){\n        let node = (row[i]);\n        if (!node.isStart && !node.isFinish && !node.isWall){\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n        }\n      }\n    });\n  }\n\n  render(){\n    const {grid, mouseIsPressed, startNodeIsPressed, finishNodeIsPressed} = this.state;\n    const isVisualizing = this.state.isVisualizing;\n\n    return (\n      <div>\n        <div id=\"openModal-about\" class=\"modalDialog\">\n            <div>\n              <a href=\"#saka\" title=\"Close\" className=\"close\">X</a>\n              <div class=\"cPanelContainer\">\n\n<div className=\"cPanelHeader\">\n  <h1>Welcome to PathFinder</h1>\n  <span>A pathfinding algorithm seeks to find the shortest path between two points.</span> <br/>\n  <span>This application visualizes various pathfinding algorithms in action on a 2D grid.</span>\n\n<h3>Instruction Guide</h3> \n<hr/>\n<p>You can visualize of one of two algorithms the A star algorithm</p>\n<hr/>\n<p>You can add obstacles to the grid through multiple ways:</p>\n<ul>\n<p> - &nbsp;<span>Toggle</span>  &nbsp; - &nbsp; You can toggle obstacles on or off</p>\n<p> - &nbsp;<span>Obstacle options</span>  &nbsp; - &nbsp;  You can select between three different obstacle densities</p>\n<p> - &nbsp;<span>Draw obstacles</span>  &nbsp; - &nbsp;  You can click or click and drag to generate obstacles with the pointer</p>\n</ul> \n\n<h3>Application Key</h3> \n<hr/>\n<ul>\n<p> - &nbsp;<span>Nodes</span>  &nbsp; - &nbsp; A point in the grid</p>\n<p> - &nbsp;<span>Gray nodes</span>  &nbsp; - &nbsp; Obstacles</p>\n<p> - &nbsp;<span>Pink nodes</span>  &nbsp; - &nbsp; Nodes that are part of the final path</p>\n<p> - &nbsp;<span>Green node</span>  &nbsp; - &nbsp; The starting point</p>\n<p> - &nbsp;<span>Red node</span>  &nbsp; - &nbsp; The end point</p>\n<p> <b><span>Note</span>  &nbsp; - &nbsp;You can drag the start point (in green) and endpoint (in red) to your desired position</b></p>\n\n</ul> \n</div>\n\n<div className=\"cPanelFooter\">\n</div>\n\n</div>\n            </div>\n        </div>\n        <nav>\n        <div className=\"logo\" onClick={() => this.resetGrid()}>\n        PATH  <br/> FINDER \n        </div>\n        <ul className=\"nav-links\">{isVisualizing \n        ? <div>\n          <div className=\"spinner\"> \n          <span></span><span></span><span></span>\n          </div>\n          <div className=\"label\">Visualizing</div>\n      </div>\n      \n        : <ul className=\"nav-links\">\n          <label className=\"dropdown\">\n              <div className=\"dd-button\">\n              Visualize\n              </div>\n              <input type=\"checkbox\" className=\"dd-input\" id=\"test\"></input>\n              <ul className=\"dd-menu\">\n                \n                <li onClick={() => this.getPath()}>A* Algorithm</li>\n              </ul>\n            </label>\n            <li onClick={() => this.resetGrid()}>Reset Grid</li>\n            <li onClick={() => this.toggleObstacles()}>Toggle Obstacles</li>  \n            <label className=\"dropdown\">\n              <div className=\"dd-button\">\n                Obstacle Options\n              </div>\n              <input type=\"checkbox\" className=\"dd-input\" id=\"test\"></input>\n              <ul className=\"dd-menu\">\n                <li onClick={() => this.changeObstacles()}>Change Obstacles</li>\n                <li onClick={() => this.changeDensity(0.095)}>Low Density Obstacles</li>\n                <li onClick={() => this.changeDensity(0.13)}>Medium Density Obstacles</li>\n                <li onClick={() => this.changeDensity(0.25)}>High Density Obstacles</li>\n              </ul>\n            </label>\n\n            <li> <a href=\"#openModal-about\">App Info</a> </li>  \n\n          </ul>\n      }</ul> <br/> \n\n      </nav>     \n\n        {/* Render the 2D grid layout */}\n        <div className=\"grid align-middle\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      startNodeIsPressed={startNodeIsPressed}\n                      finishNodeIsPressed={finishNodeIsPressed}\n                      whileMousePressed={(row, col) => this.handleMousePress(row, col)}\n                      onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}   \n                      onMouseLeave={(row, col) => this.handleMouseLeave(row, col)}   \n                      onMouseUp={()=> this.handleStop(row, col)}                \n                      row={row}>\n                    </Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\n/**\n * function to setup nodes and default position of startpoint and endpoint\n */\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    distance: Infinity,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    isWall: false,\n    isVisited: false,\n    previousNode: null,\n    f_score: Infinity,\n    g_score: Infinity,\n    h_score: Infinity,\n  };\n};\n\n/**\n * function to setup 2D grid layout\n */\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row <ROW_NUMBER; row++) {\n    const currentRow = [];\n    for (let col = 0; col < COLUMN_NUMBER; col++) {\n      let newNode =createNode(col, row);\n      //Random wall generator\n      if (randomGenerator){\n          if (Math.random(1) < defaultRandomWallGenerator){\n            newNode.isWall = true;\n        }\n      }\n      currentRow.push(newNode);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\n/**\n * function to make a node a wall\n */\nconst toggleWallResetGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n\n/**\n * function to make a node a startPoint or remove it as a startPoint\n */\nconst toggleStartResetGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStart: !node.isStart,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n\n/**\n * function to make a node a endPoint or remove it as a startPoint\n */\nconst toggleFinishResetGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isFinish: !node.isFinish,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n}"]},"metadata":{},"sourceType":"module"}